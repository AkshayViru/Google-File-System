# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gfs_pb2 as gfs__pb2


class MasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListFiles = channel.unary_unary(
                '/gfs.Master/ListFiles',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.CreateFile = channel.unary_unary(
                '/gfs.Master/CreateFile',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.AppendFile = channel.unary_unary(
                '/gfs.Master/AppendFile',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.CreateChunk = channel.unary_unary(
                '/gfs.Master/CreateChunk',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.ReadFile = channel.unary_unary(
                '/gfs.Master/ReadFile',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.DeleteFile = channel.unary_unary(
                '/gfs.Master/DeleteFile',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.UndeleteFile = channel.unary_unary(
                '/gfs.Master/UndeleteFile',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )


class MasterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UndeleteFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'CreateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFile,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'AppendFile': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendFile,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'CreateChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateChunk,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'ReadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadFile,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'DeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFile,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'UndeleteFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UndeleteFile,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gfs.Master', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Master(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.Master/ListFiles',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.Master/CreateFile',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppendFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.Master/AppendFile',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.Master/CreateChunk',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.Master/ReadFile',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.Master/DeleteFile',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UndeleteFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.Master/UndeleteFile',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ChunkServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/gfs.ChunkServer/Create',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.GetChunkSpace = channel.unary_unary(
                '/gfs.ChunkServer/GetChunkSpace',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.Append = channel.unary_unary(
                '/gfs.ChunkServer/Append',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )
        self.Read = channel.unary_unary(
                '/gfs.ChunkServer/Read',
                request_serializer=gfs__pb2.String.SerializeToString,
                response_deserializer=gfs__pb2.String.FromString,
                )


class ChunkServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChunkSpace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Append(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChunkServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'GetChunkSpace': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChunkSpace,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'Append': grpc.unary_unary_rpc_method_handler(
                    servicer.Append,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=gfs__pb2.String.FromString,
                    response_serializer=gfs__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gfs.ChunkServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChunkServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.ChunkServer/Create',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChunkSpace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.ChunkServer/GetChunkSpace',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Append(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.ChunkServer/Append',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/gfs.ChunkServer/Read',
            gfs__pb2.String.SerializeToString,
            gfs__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
